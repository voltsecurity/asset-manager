{"version":3,"sources":["images/ladder.jpg","images/drill.jpg","images/generator.jpg","images/snake.jpg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/menu/menu.component.jsx","components/header-bar/header-bar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","item","className","src","imageUrl","alt","name","type","CardList","equipment","map","SearchBox","handleChange","placeholder","onChange","Menu","HeaderBar","props","children","database","require","id","model","App","state","itemDB","searchField","this","filteredItems","filter","toLowerCase","includes","e","setState","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0938315.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ladder.8d76d8c5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drill.b0b36b5b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/generator.07aba8e5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snake.8470ec52.jpg\";","import React from 'react';\nimport './card.styles.css';\n\nexport const Card = ({ item }) => (\n    <div className='card'>\n        <img src={item.imageUrl} alt=\"item\"/>\n        <h3>{item.name}</h3>\n        <p className='type'><strong>Type</strong></p>\n        <p>{item.type}</p>\n        {/* <p>{item.model}</p> */}\n    </div>\n)","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = ({ equipment }) => (\n    <div className='container'>\n        <div className='card-list'>\n        {equipment.map(item => <Card item={item} />)}\n        </div>\n    </div>\n)","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ( { handleChange, placeholder }) => (\n        <input onChange={handleChange} placeholder={placeholder} type=\"search\" className='search-box'/>\n)","import React from 'react';\nimport './menu.styles.css'\n\nexport const Menu = () => (\n    <div className='menu'></div>\n)","import React from 'react';\nimport './header-bar.style.css'\n\nexport const HeaderBar = (props) => (\n    <div className='bar'>{props.children}</div>\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Menu } from './components/menu/menu.component';\nimport { HeaderBar } from './components/header-bar/header-bar.component';\nimport './App.css';\n\nconst database = [\n  {\n    imageUrl: require('./images/ladder.jpg'),\n    id: '',\n    name: '7-Step',\n    type: 'Ladder',\n    model: 'Fibreglass'\n  },\n  {\n    imageUrl: require('./images/drill.jpg'),\n    id: '',\n    name: 'Ramset Concrete Drill',\n    type: 'Concrete Drill',\n    model: 'Ramset'\n  },\n  {\n    imageUrl: require('./images/generator.jpg'),\n    id: '',\n    name: 'Old Generator',\n    type: 'Generator',\n    model: 'Shit'\n  },\n  {\n    imageUrl: require('./images/snake.jpg'),\n    id: '',\n    name: 'Large Fibre Snake',\n    type: 'Snake',\n    model: 'Snake Charmer'\n  },\n    {\n    imageUrl: require('./images/ladder.jpg'),\n    id: '',\n    name: '7-Step',\n    type: 'Ladder',\n    model: 'Fibreglass'\n  },\n  {\n    imageUrl: require('./images/drill.jpg'),\n    id: '',\n    name: 'Ramset Concrete Drill',\n    type: 'Concrete Drill',\n    model: 'Ramset'\n  },\n  {\n    imageUrl: require('./images/generator.jpg'),\n    id: '',\n    name: 'Old Generator',\n    type: 'Generator',\n    model: 'Shit'\n  },\n  {\n    imageUrl: require('./images/snake.jpg'),\n    id: '',\n    name: 'Large Fibre Snake',\n    type: 'Snake',\n    model: 'Snake Charmer'\n  },\n  {\n    imageUrl: require('./images/ladder.jpg'),\n    id: '',\n    name: '7-Step',\n    type: 'Ladder',\n    model: 'Fibreglass'\n  },\n  {\n    imageUrl: require('./images/drill.jpg'),\n    id: '',\n    name: 'Ramset Concrete Drill',\n    type: 'Concrete Drill',\n    model: 'Ramset'\n  },\n  {\n    imageUrl: require('./images/generator.jpg'),\n    id: '',\n    name: 'Old Generator',\n    type: 'Generator',\n    model: 'Shit'\n  },\n  {\n    imageUrl: require('./images/snake.jpg'),\n    id: '',\n    name: 'Large Fibre Snake',\n    type: 'Snake',\n    model: 'Snake Charmer'\n  },\n  {\n    imageUrl: require('./images/ladder.jpg'),\n    id: '',\n    name: '7-Step',\n    type: 'Ladder',\n    model: 'Fibreglass'\n  },\n  {\n    imageUrl: require('./images/drill.jpg'),\n    id: '',\n    name: 'Ramset Concrete Drill',\n    type: 'Concrete Drill',\n    model: 'Ramset'\n  },\n  {\n    imageUrl: require('./images/generator.jpg'),\n    id: '',\n    name: 'Old Generator',\n    type: 'Generator',\n    model: 'Shit'\n  },\n  {\n    imageUrl: require('./images/snake.jpg'),\n    id: '',\n    name: 'Large Fibre Snake',\n    type: 'Snake',\n    model: 'Snake Charmer'\n  }\n]\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      itemDB: database,\n      searchField: ''\n    }\n  }\n\n  render() {\n    const { itemDB, searchField } = this.state;\n    const filteredItems =\n      itemDB.filter(item => (item.name.toLowerCase().includes(searchField)) \n      || (item.type.toLowerCase().includes(searchField)))\n\n    return(\n    <div className='App'>\n        <Menu />\n        <div className='main'>\n          <HeaderBar>\n            <SearchBox handleChange={e => this.setState({ searchField: e.target.value })}\n            placeholder={'Search Assets'} />\n          </HeaderBar>\n          <CardList equipment={filteredItems} />\n        </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}